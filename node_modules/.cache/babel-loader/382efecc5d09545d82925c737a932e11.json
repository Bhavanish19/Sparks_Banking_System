{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sparks projects\\\\Basic_Banking_System-main\\\\src\\\\containers\\\\Transfer\\\\Transfer.js\";\nimport React, { Component } from 'react';\nimport classes from './Transfer.module.css';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../../store/actions/index';\nimport * as actionTypes from '../../store/actions/actionTypes';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Transfer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      amount: \"\"\n    };\n\n    this.onAmountChange = event => {\n      this.setState({\n        amount: event.target.value\n      });\n    };\n\n    this.balanceUpdates = () => {\n      const pattern = /^\\d+$/;\n\n      if (!pattern.test(this.state.amount)) {\n        toast.error(\"Invalid amount\");\n        const tData = {\n          sender: this.props.sender.email,\n          receiver: this.props.receiver.email,\n          amount: parseInt(this.state.amount),\n          state: \"failure\"\n        };\n        this.props.addTransaction(tData);\n      } else if (this.state.amount > this.props.sender.currentBalance) {\n        toast.error(\"Transfer amount larger than sender balance\");\n        const tData = {\n          sender: this.props.sender.email,\n          receiver: this.props.receiver.email,\n          amount: parseInt(this.state.amount),\n          state: \"failure\"\n        };\n        this.props.addTransaction(tData);\n      } else {\n        this.props.updateTransfer();\n        const sData = { ...this.props.sender,\n          currentBalance: this.props.sender.currentBalance - this.state.amount\n        };\n        const rData = { ...this.props.receiver,\n          currentBalance: parseInt(this.props.receiver.currentBalance) + parseInt(this.state.amount)\n        };\n        this.props.updateBalances(sData, rData);\n        const tData = {\n          sender: sData.email,\n          receiver: rData.email,\n          amount: parseInt(this.state.amount),\n          state: \"success\"\n        };\n        this.props.addTransaction(tData);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.outerForm + \" shadow bg-white py-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Transfer Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.transferForm,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.formRow,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              disabled: true,\n              name: \"sender\",\n              value: \"Sender :: \" + this.props.sender.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              disabled: true,\n              value: \"Balance :: \" + this.props.sender.currentBalance\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.formRow,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              disabled: true,\n              name: \"receiver\",\n              value: \"Receiver :: \" + this.props.receiver.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              disabled: true,\n              value: \"Balance :: \" + this.props.receiver.currentBalance\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Transfer Amount\",\n            value: this.state.amount,\n            onChange: this.onAmountChange,\n            className: classes.amountInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.btnGroup,\n            children: [/*#__PURE__*/_jsxDEV(NavLink, {\n              to: \"/result\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.balanceUpdates,\n                className: \"btn btn-success\",\n                children: \"Transfer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-danger\",\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    sender: state.transfer.sender,\n    receiver: state.transfer.receiver\n  };\n};\n\nconst mapDispatchtoProps = dispatch => {\n  return {\n    updateBalances: (sd, rd) => dispatch(actions.updateBalances(sd, rd)),\n    updateTransfer: () => dispatch({\n      type: actionTypes.TRANSFER_SUCCESS\n    }),\n    addTransaction: data => dispatch(actions.addTransaction(data))\n  };\n};\n\nexport default connect(mapStatetoProps, mapDispatchtoProps)(Transfer);","map":{"version":3,"sources":["D:/Sparks projects/Basic_Banking_System-main/src/containers/Transfer/Transfer.js"],"names":["React","Component","classes","connect","NavLink","actions","actionTypes","toast","Transfer","state","amount","onAmountChange","event","setState","target","value","balanceUpdates","pattern","test","error","tData","sender","props","email","receiver","parseInt","addTransaction","currentBalance","updateTransfer","sData","rData","updateBalances","render","outerForm","transferForm","formRow","username","amountInput","btnGroup","mapStatetoProps","transfer","mapDispatchtoProps","dispatch","sd","rd","type","TRANSFER_SUCCESS","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './Transfer.module.css';\n\nimport {connect} from 'react-redux';\nimport {NavLink} from 'react-router-dom';\nimport * as actions from '../../store/actions/index';\nimport * as actionTypes from '../../store/actions/actionTypes';\n\nimport {toast} from 'react-toastify';\n\nclass Transfer extends Component {\n    state = {\n        amount: \"\"\n    }\n    onAmountChange = (event) => {\n        this.setState({amount: event.target.value});\n    }\n    balanceUpdates = () => {\n        const pattern = /^\\d+$/;\n\n        if(!pattern.test(this.state.amount)){\n            toast.error(\"Invalid amount\");\n            const tData = {\n                sender: this.props.sender.email,\n                receiver: this.props.receiver.email,\n                amount: parseInt(this.state.amount),\n                state: \"failure\"\n            }\n            this.props.addTransaction(tData);\n        }else if(this.state.amount > this.props.sender.currentBalance){\n            toast.error(\"Transfer amount larger than sender balance\");\n            const tData = {\n                sender: this.props.sender.email,\n                receiver: this.props.receiver.email,\n                amount: parseInt(this.state.amount),\n                state: \"failure\"\n            }\n            this.props.addTransaction(tData);\n        }else{\n            this.props.updateTransfer();\n            const sData = {\n                ...this.props.sender,\n                currentBalance: this.props.sender.currentBalance - this.state.amount\n            };\n            const rData = {\n                ...this.props.receiver,\n                currentBalance: parseInt(this.props.receiver.currentBalance) + parseInt(this.state.amount)\n            }\n            this.props.updateBalances(sData, rData);\n            const tData = {\n                sender: sData.email,\n                receiver: rData.email,\n                amount: parseInt(this.state.amount),\n                state: \"success\"\n            }\n            this.props.addTransaction(tData);\n        }\n    }\n    render() { \n        return (\n            <div className=\"container mt-5\">\n                <div className={classes.outerForm + \" shadow bg-white py-4\"}>\n                    <h1>Transfer Form</h1>\n                    <form className={classes.transferForm}>\n                        <div className={classes.formRow}>\n                            <input type=\"text\" disabled name=\"sender\" \n                            value={\"Sender :: \"+this.props.sender.username} />\n                            <input type=\"text\" disabled\n                            value={\"Balance :: \"+this.props.sender.currentBalance} />\n                        </div>\n                        <div className={classes.formRow}>\n                            <input type=\"text\" disabled name=\"receiver\" \n                            value={\"Receiver :: \"+this.props.receiver.username} />\n                            <input type=\"text\" disabled\n                            value={\"Balance :: \"+this.props.receiver.currentBalance} />\n                        </div>\n                        <input type=\"text\" placeholder=\"Transfer Amount\"\n                                value={this.state.amount}\n                                onChange={this.onAmountChange}\n                                className={classes.amountInput} />\n                        <div className={classes.btnGroup}>\n                            <NavLink to=\"/result\">\n                                <button onClick={this.balanceUpdates} className=\"btn btn-success\">Transfer</button>\n                            </NavLink>\n                            <NavLink to=\"/\">\n                                <button className=\"btn btn-danger\">Cancel</button>\n                            </NavLink>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStatetoProps = state => {\n    return {\n        sender: state.transfer.sender,\n        receiver: state.transfer.receiver\n    }\n}\n\nconst mapDispatchtoProps = dispatch => {\n    return {\n        updateBalances: (sd, rd) => dispatch(actions.updateBalances(sd, rd)),\n        updateTransfer: () => dispatch({type: actionTypes.TRANSFER_SUCCESS}),\n        addTransaction: (data) => dispatch(actions.addTransaction(data))\n    }\n}\n \nexport default connect(mapStatetoProps, mapDispatchtoProps)(Transfer);"]},"metadata":{},"sourceType":"module"}